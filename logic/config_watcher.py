import configparser,random
class Config:
        def __init__(A):A.config=configparser.ConfigParser();A.window_name=A.get_random_window_name();A.Read(verbose=False)
        def Read(A,verbose=False):
                B='Capture Methods'
                try:
                        with open('config.ini','r',encoding='utf-8')as C:A.config.read_file(C)
                except FileNotFoundError:print('Config file not found!');quit()
                A.config_Detection_window=A.config['Detection window'];A.detection_window_width=int(A.config_Detection_window['detection_window_width']);A.detection_window_height=int(A.config_Detection_window['detection_window_height']);A.circle_capture=A.config_Detection_window.getboolean('circle_capture');A.config_Bettercam_Capture=A.config[B];A.Bettercam_capture=A.config_Bettercam_Capture.getboolean('Bettercam_capture');A.bettercam_capture_fps=int(A.config_Bettercam_Capture['bettercam_capture_fps']);A.bettercam_monitor_id=int(A.config_Bettercam_Capture['bettercam_monitor_id']);A.bettercam_gpu_id=int(A.config_Bettercam_Capture['bettercam_gpu_id']);A.config_Obs_capture=A.config[B];A.Obs_capture=A.config_Obs_capture.getboolean('Obs_capture');A.Obs_camera_id=str(A.config_Obs_capture['Obs_camera_id']);A.Obs_capture_fps=int(A.config_Obs_capture['Obs_capture_fps']);A.config_Aim=A.config['Aim'];A.body_y_offset=float(A.config_Aim['body_y_offset']);A.hideout_targets=A.config_Aim.getboolean('hideout_targets');A.disable_headshot=A.config_Aim.getboolean('disable_headshot');A.disable_prediction=A.config_Aim.getboolean('disable_prediction');A.prediction_interval=float(A.config_Aim['prediction_interval']);A.third_person=A.config_Aim.getboolean('third_person');A.config_Hotkeys_settings=A.config['Hotkeys'];A.hotkey_targeting=str(A.config_Hotkeys_settings['hotkey_targeting']);A.hotkey_targeting_list=A.hotkey_targeting.split(',');A.hotkey_exit=str(A.config_Hotkeys_settings['hotkey_exit']);A.hotkey_pause=str(A.config_Hotkeys_settings['hotkey_pause']);A.hotkey_reload_config=str(A.config_Hotkeys_settings['hotkey_reload_config']);A.config_Mouse=A.config['Mouse'];A.mouse_dpi=int(A.config_Mouse['mouse_dpi']);A.mouse_sensitivity=float(A.config_Mouse['mouse_sensitivity']);A.mouse_fov_width=int(A.config_Mouse['mouse_fov_width']);A.mouse_fov_height=int(A.config_Mouse['mouse_fov_height']);A.mouse_min_speed_multiplier=float(A.config_Mouse['mouse_min_speed_multiplier']);A.mouse_max_speed_multiplier=float(A.config_Mouse['mouse_max_speed_multiplier']);A.mouse_lock_target=A.config_Mouse.getboolean('mouse_lock_target');A.mouse_auto_aim=A.config_Mouse.getboolean('mouse_auto_aim');A.mouse_ghub=A.config_Mouse.getboolean('mouse_ghub');A.mouse_rzr=A.config_Mouse.getboolean('mouse_rzr');A.config_Shooting=A.config['Shooting'];A.auto_shoot=A.config_Shooting.getboolean('auto_shoot');A.triggerbot=A.config_Shooting.getboolean('triggerbot');A.force_click=A.config_Shooting.getboolean('force_click');A.bScope_multiplier=float(A.config_Shooting['bScope_multiplier']);A.config_Arduino=A.config['Arduino'];A.arduino_move=A.config_Arduino.getboolean('arduino_move');A.arduino_shoot=A.config_Arduino.getboolean('arduino_shoot');A.arduino_port=str(A.config_Arduino['arduino_port']);A.arduino_baudrate=int(A.config_Arduino['arduino_baudrate']);A.arduino_16_bit_mouse=A.config_Arduino.getboolean('arduino_16_bit_mouse');A.config_AI=A.config['AI'];A.AI_model_name=str(A.config_AI['AI_model_name']);A.ai_model_image_size=int(A.config_AI['ai_model_image_size']);A.AI_conf=float(A.config_AI['AI_conf']);A.AI_device=str(A.config_AI['AI_device']);A.AI_enable_AMD=A.config_AI.getboolean('AI_enable_AMD');A.AI_mouse_net=A.config_AI.getboolean('AI_mouse_net');A.config_overlay=A.config['overlay'];A.show_overlay=A.config_overlay.getboolean('show_overlay');A.overlay_show_borders=A.config_overlay.getboolean('overlay_show_borders');A.overlay_show_boxes=A.config_overlay.getboolean('overlay_show_boxes');A.overlay_show_target_line=A.config_overlay.getboolean('overlay_show_target_line');A.overlay_show_target_prediction_line=A.config_overlay.getboolean('overlay_show_target_prediction_line');A.overlay_show_labels=A.config_overlay.getboolean('overlay_show_labels');A.overlay_show_conf=A.config_overlay.getboolean('overlay_show_conf');A.config_Debug_window=A.config['Debug window'];A.show_window=A.config_Debug_window.getboolean('show_window');A.show_detection_speed=A.config_Debug_window.getboolean('show_detection_speed');A.show_window_fps=A.config_Debug_window.getboolean('show_window_fps');A.show_boxes=A.config_Debug_window.getboolean('show_boxes');A.show_labels=A.config_Debug_window.getboolean('show_labels');A.show_conf=A.config_Debug_window.getboolean('show_conf');A.show_target_line=A.config_Debug_window.getboolean('show_target_line');A.show_target_prediction_line=A.config_Debug_window.getboolean('show_target_prediction_line');A.show_bScope_box=A.config_Debug_window.getboolean('show_bScope_box');A.show_history_points=A.config_Debug_window.getboolean('show_history_points');A.debug_window_always_on_top=A.config_Debug_window.getboolean('debug_window_always_on_top');A.spawn_window_pos_x=int(A.config_Debug_window['spawn_window_pos_x']);A.spawn_window_pos_y=int(A.config_Debug_window['spawn_window_pos_y']);A.debug_window_scale_percent=int(A.config_Debug_window['debug_window_scale_percent']);A.debug_window_screenshot_key=str(A.config_Debug_window['debug_window_screenshot_key']);A.debug_window_name=A.window_name
                if verbose:print('Config reloaded')
        def get_random_window_name(D):
                B='Calculator'
                try:
                        with open('window_names.txt','r',encoding='utf-8')as C:A=C.read().splitlines()
                        return random.choice(A)if A else B
                except FileNotFoundError:print('window_names.txt file not found, using default window name.');return B
cfg=Config()